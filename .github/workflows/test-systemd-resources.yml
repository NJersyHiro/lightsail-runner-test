name: Test Systemd Resource Limits

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  resource-test-cpu:
    runs-on: self-hosted
    steps:
      - name: Show runner info
        run: |
          echo "üèÉ Runner: $RUNNER_NAME"
          echo "üìä System Info:"
          echo "CPU Count: $(nproc)"
          echo "Total Memory: $(free -h | grep Mem | awk '{print $2}')"
      
      - name: Check systemd cgroup info
        run: |
          echo "=== Systemd CGroup Info ==="
          # ÁèæÂú®„ÅÆ„Éó„É≠„Çª„Çπ„ÅÆcgroup
          echo "Current cgroup:"
          cat /proc/self/cgroup || echo "Cannot read cgroup info"
          
          # systemd„ÅÆ„É™„ÇΩ„Éº„ÇπÂà∂Èôê„ÇíÁ¢∫Ë™ç
          echo ""
          echo "Systemd resource limits:"
          systemctl show github-runner@*.service 2>/dev/null | grep -E "(CPU|Memory)" || echo "Service not found"
      
      - name: CPU stress test
        run: |
          echo "üî• Starting CPU stress test..."
          echo "This will use CPU for 30 seconds"
          
          # CPU‰ΩøÁî®Áéá„ÇíÁõ£Ë¶ñ„Åó„Å™„Åå„Çâ„Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà
          (
            for i in {1..4}; do
              # ÂêÑ„Ç≥„Ç¢„ÅßË®àÁÆóÂá¶ÁêÜ
              (while [ true ]; do echo "scale=5000; 4*a(1)" | bc -l > /dev/null; done) &
            done
            
            # 30ÁßíÈñìÂÆüË°å
            sleep 30
            
            # „Åô„Åπ„Å¶„ÅÆÂ≠ê„Éó„É≠„Çª„Çπ„ÇíÁµÇ‰∫Ü
            jobs -p | xargs -r kill
          ) &
          
          STRESS_PID=$!
          
          # CPU‰ΩøÁî®Áéá„Çí„É¢„Éã„Çø„É™„É≥„Ç∞
          for i in {1..6}; do
            echo "[$i/6] CPU usage at $(date +%H:%M:%S):"
            top -bn1 | grep "Cpu(s)" | head -1
            ps aux | grep -E "(runner|bc)" | grep -v grep | head -5
            sleep 5
          done
          
          # „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà„ÇíÁµÇ‰∫Ü
          kill $STRESS_PID 2>/dev/null || true
          wait $STRESS_PID 2>/dev/null || true
          
          echo "‚úÖ CPU stress test completed"

  resource-test-memory:
    runs-on: self-hosted
    steps:
      - name: Memory stress test
        run: |
          echo "üíæ Starting memory stress test..."
          echo "Current memory usage:"
          free -h
          
          # Python„Åß1GB„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù
          python3 -c "
import time
import psutil
import os

print('=== Memory Allocation Test ===')
print(f'PID: {os.getpid()}')
print(f'Initial memory: {psutil.Process().memory_info().rss / 1024 / 1024:.2f} MB')

# 1GB„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù
data = []
chunk_size = 100 * 1024 * 1024  # 100MB
chunks = 10  # ÂêàË®à1GB

for i in range(chunks):
    data.append(bytearray(chunk_size))
    current_mem = psutil.Process().memory_info().rss / 1024 / 1024
    print(f'Allocated {(i+1)*100}MB, Process memory: {current_mem:.2f} MB')
    time.sleep(2)

print('Holding memory for 10 seconds...')
time.sleep(10)
print('Memory test completed')
          " &
          
          MEM_PID=$!
          
          # „É°„É¢„É™‰ΩøÁî®Áéá„Çí„É¢„Éã„Çø„É™„É≥„Ç∞
          for i in {1..10}; do
            echo ""
            echo "[$i/10] Memory usage at $(date +%H:%M:%S):"
            free -h
            echo "Process memory:"
            ps aux | grep -E "(python3|runner)" | grep -v grep | head -3
            sleep 3
          done
          
          wait $MEM_PID || true
          echo "‚úÖ Memory stress test completed"

  resource-test-parallel:
    runs-on: self-hosted
    strategy:
      matrix:
        job_id: [1, 2, 3]
    steps:
      - name: Parallel resource test
        run: |
          echo "üîÑ Parallel job ${{ matrix.job_id }} on $RUNNER_NAME"
          
          # ÂêÑ„Ç∏„Éß„Éñ„ÅåÂêåÊôÇ„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩøÁî®
          echo "Using CPU and memory for 20 seconds..."
          
          # CPU„Å®„É°„É¢„É™„ÅÆ‰∏°Êñπ„Çí‰ΩøÁî®
          (
            # CPU‰ΩøÁî®
            echo "scale=5000; 4*a(1)" | bc -l > /dev/null &
            CPU_PID=$!
            
            # „É°„É¢„É™‰ΩøÁî®Ôºà200MBÔºâ
            python3 -c "
data = bytearray(200 * 1024 * 1024)
import time
time.sleep(20)
            " &
            MEM_PID=$!
            
            # 20ÁßíÂæÖÊ©ü
            sleep 20
            
            # „Éó„É≠„Çª„Çπ„ÇíÁµÇ‰∫Ü
            kill $CPU_PID 2>/dev/null || true
            kill $MEM_PID 2>/dev/null || true
          ) &
          
          STRESS_PID=$!
          
          # „É™„ÇΩ„Éº„Çπ‰ΩøÁî®Áä∂Ê≥Å„ÇíË®òÈå≤
          for i in {1..4}; do
            echo "[$i/4] Job ${{ matrix.job_id }} resource usage:"
            echo "CPU: $(ps aux | grep -E "bc|python3" | grep -v grep | awk '{sum+=$3} END {print sum "%"}')"
            echo "Memory: $(ps aux | grep -E "bc|python3" | grep -v grep | awk '{sum+=$4} END {print sum "%"}')"
            sleep 5
          done
          
          wait $STRESS_PID || true
          echo "‚úÖ Parallel job ${{ matrix.job_id }} completed"